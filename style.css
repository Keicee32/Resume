@import url('https://fonts.googleapis.com/css2?family=Tenali+Ramakrishna&display=swap');

*{
    box-sizing: border-box; /* This allows to add padding and border without adding to the width of the element */
    padding: 0;
    margin: 0;
}

body{
    line-height: 1.9;
    color: white;
    font-family: 'Tenali Ramakrishna', sans-serif;
    background-color: black;
    font-size: 17px;
}

a{
    text-decoration: none;
    color: tomato;
}

p{
    color: whitesmoke;
}

h2{
    font-size: 30px;
    font-weight: 900;
}

ul{
    list-style-type: none;
}

img{
    height: 100%;
    width: 100%; /* this keeps images within their container no matter the size of the image */
}

.navbar{
    height: 70px;
    background-color: black;
}

.navbar ul{
    display: flex;
}

/* .navbar li{
    justify-content: flex-end;
} */
.navbar .flex{
    justify-content: flex-end;
}

.navbar a{
    color: tomato;
    padding: 10px;
    margin: 0 5px;
}

.main img{
    justify-self: flex-end;
}

.main .grid{
    align-items: flex-start;
}

.main .social a{
    padding: 0 7px;
    justify-content: center;
}

.main .social i{
    font-size: 20px;
    margin-left: 50px;
    margin-right: 40px;
}

.img-container{
    height: 600px;
    margin-bottom: 40px;
}
/* .main{
    border: 2px solid tomato;
} */
/* UTILITIY CSS */

.container{
    max-width: 1100px;
    margin: 0 auto;
    overflow: auto; /* This helps to remove margin/padding caused by the heading (h1 to h6 tags) */
    padding: 0 40px;
}

.card{
    background-color: #fff;
    border-radius: 10px;
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.5); /* 0 is horizontal offset, 3px is the vertical offset, 10px is the blur */
    padding: 20px;
    margin: 10px;
    color: #333;
}

.flex{
    display: flex; /* This aligns the navbar items in a flex manner making it easy to arrange */
    justify-content: center;
    align-items: center;
    height: 100%;
} 

/* END OF FLEX SYSTEM CSS */

/* GRID SYSTEM CSS */

/* This class aligns the grid side-by-side */
.grid{
    display: grid; /* This CSS property makes the element in grid form */
    grid-template-columns: repeat(2, 1fr); /* the defines how wide each column should be. Note: px isn't advisable for use here */
    gap: 20px;
    justify-self: center;
    align-items: center;
    height: 100%;
}

.grid-alt{
    display: grid; /* This CSS property makes the element in grid form */
    grid-template-rows: repeat(2, 1fr); /* the defines how wide each column should be. Note: px isn't advisable for use here */
    gap: 20px;
    justify-self: center;
    align-items: center;
    height: 100%;
    padding-top: 20px;
}

.grid-3{
    grid-template-columns: repeat(3, 1fr);
}

.py-1{
    padding: 1rem 0;
}
.py-2{
    padding: 1.5rem 0;
}
.py-3{
    padding: 2rem 0;
}
.py-4{
    padding: 3rem 0;
}
.py-5{
    padding: 3.5rem 0;
}

@media(max-width:768px){
    .grid,
    .main .grid{
        grid-template-columns: 1fr;
        grid-template-rows: 1fr;
    }

    .maintext{
        text-align: center;
    }
}